#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mysql:server');
var http = require('http');
var neo4j = require('neo4j-driver').v1;
var RadixTrie = require('radix-trie');
var fs = require('fs');

var config = require('../config');

/**
* Custom Module
*/
var patricia = require('../src/patricia');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
* Stateful Variables.
*/
driver = neo4j.driver("bolt://" + config.neo4j.ip + ":" + config.neo4j.port, neo4j.auth.basic(config.neo4j.user, config.neo4j.password));
trie = new RadixTrie();

if (process.env.GEO){
  console.log('loading data from geodb');
  fs.readFile('import/GeoLite2-Country-Locations-en.csv', function(err, data){
    if (err){
      throw err;
    }
    var location = {};
    data.toString().split('\n').splice(1).forEach( x => {
      var f = x.split(',');
      location[f[0]] = f[4];
    });
    fs.readFile('import/GeoLite2-Country-Blocks-IPv4.csv', function(err, d){
      if (err){
        throw err;
      }
      d.toString().split('\n').splice(1).forEach( x => {
        var f = x.split(',');
        var loc = location[f[1]] || '--';
        patricia.addString(trie, f[0], loc);
      });
      console.log('ready!');
    });
  });
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
* Close Neo4j Driver as Indicated in its Document.
*/
process.on('SIGTERM', closeDriver);
process.on('SIGINT', closeDriver);

function closeDriver(){
  driver.close();
  process.exit(0);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
